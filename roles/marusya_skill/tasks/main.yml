---
- name: Install MySQL client
  package:
    name: mariadb-client
    state: present

- name: Clone repo
  git:
    repo: "{{ marusya_skill_git }}"
    dest: /usr/local/bin/{{ app_name }}
    clone: yes
    update: yes
  notify:
    - app_restart

- name: Creating assol user group
  group: name="{{groupId}}"

- name: Creating assol user
  user:
    name: "{{userId}}"
    group: "{{groupId}}"
    system: yes
    shell: "/sbin/nologin"
    comment: "{{userId}} nologin User"
    createhome: "no"
    state: present

- name: Add admin users to assol group
  user:
    name: "{{ item.name }}"
    groups: assol
    append: yes
  with_items: "{{ admins }}"

- name: Create uwsgi-app-config
  template:
    src: uwsgi-app.ini.j2
    dest: /etc/uwsgi/apps-available/{{ app_name }}.ini
    mode: 0644
    owner: root
    group: root
  notify:
    - app_restart

- name: Create a symbolic link in apps-enabled
  file:
    src: /etc/uwsgi/apps-available/{{ app_name }}.ini
    dest: /etc/uwsgi/apps-enabled/{{ app_name }}.ini
    owner: root
    group: root
    mode: 0644
    state: link
  notify:
    - app_restart

- name: Create path for working directory
  file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode | default('0755') }}"
  with_items:
    - path: "{{ marusya_skill_logdir }}"
      owner: assol
      group: assol
    - path: "{{ marusya_skill_confdir }}"
      owner: assol
      group: assol

- name: Copy logrotate config file
  template:
    src: logrotate.j2
    dest: /etc/logrotate.d/{{ app_name }}
  notify: logrotate_restart

- name: Delete invalid rsyslog config
  file:
    path: /etc/rsyslog.d/{{ app_name }}
    state: absent
  notify: rsyslog_restart

- name: Copy rsyslog config file
  template:
    src: rsyslog.conf.j2
    dest: /etc/rsyslog.d/98-{{ app_name }}.conf
  notify: rsyslog_restart

- name: Create app config
  template:
    src: "{{ item.src }}"
    dest: "{{ marusya_skill_confdir }}/{{ item.dest }}"
    mode: 0660
    owner: assol
    group: assol
    backup: yes
  with_items:
    - { src: app.config.json.j2, dest: skill.config.json }
  notify:
    - app_restart

- name: Copy vocabulary
  ansible.builtin.copy:
    src: "/usr/local/bin/{{ app_name }}/config_copy/skill.vocabulary.json"
    dest: "{{ marusya_skill_confdir }}/skill.vocabulary.json"
    mode: 0660
    owner: assol
    group: assol
    remote_src: yes
    backup: yes
  notify:
    - app_restart

- name: Create venv and install requirements
  pip: 
    requirements: /usr/local/bin/{{ app_name }}/requirements.txt
    virtualenv: /usr/local/bin/{{ app_name }}/env
    virtualenv_python: python3.7
  notify:
    - app_restart

- name: Retrieve db user grants from mysql
  shell: /usr/bin/mysql -u sst_user -p'{{ mariadb_sst_pass }}' --host {{ mariadb_proxy_host }} -P {{ mariadb_proxy_port }} -e "select Host, User from mysql.user where User = '{{ marusya_skill_db_user }}';" --batch --skip-column-names
  register: stuff
  check_mode: no
  changed_when: False
  when: (inventory_hostname == groups[marusya_skill_group][0])

- name: Revoke all grant for db user
  vars:
    userhost: "'{{ item.split('\t')[1] }}'@'{{ item.split('\t')[0] }}'"
  shell: /usr/bin/mysql -u sst_user -p'{{ mariadb_sst_pass }}' --host {{ mariadb_proxy_host }} -P {{ mariadb_proxy_port }} -ne "DROP USER {{ userhost }};"
  with_items: "{{ stuff.stdout_lines }}"
  when: (inventory_hostname == groups[marusya_skill_group][0]) and (item.split('\t')[0] not in mariadb_safe_hosts)

- name: Add db user to mysql
  shell: /usr/bin/mysql -u sst_user -p'{{ mariadb_sst_pass }}' --host {{ mariadb_proxy_host }} -P {{ mariadb_proxy_port }} -ne "GRANT SELECT, INSERT, DELETE, UPDATE ON {{ marusya_skill_db_name }}.* TO '{{ marusya_skill_db_user }}'@'{{ item }}' IDENTIFIED BY '{{ marusya_skill_db_pass }}';"
  with_items: "{{ mariadb_safe_hosts }}"
  changed_when: False
  when: (inventory_hostname == groups[marusya_skill_group][0])

- name: Re-create db
  shell: /usr/bin/mysql -u sst_user -p'{{ mariadb_sst_pass }}' --host {{ mariadb_proxy_host }} -P {{ mariadb_proxy_port }} < /usr/local/bin/{{ app_name }}/sql_setup/marusyatech.sql 
  when: (inventory_hostname == groups[marusya_skill_group][0]) and (marusya_skill_setup | default(false) | bool)

- meta: flush_handlers

- name: Start and enable uwsgi-app
  systemd:
    name: "uwsgi-app@{{ app_name }}"
    state: started
    enabled: yes
